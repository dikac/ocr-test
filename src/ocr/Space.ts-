// @ts-ignore
import Space from "ocr-space-api";
import util from "util";

import jimp from 'jimp';
import Nik from "./space/Nik";
import HeaderProvince from "./space/HeaderProvince";
import HeaderCity from "./space/HeaderCity";
import PlaceAndDateBirth from "./space/PlaceAndDateBirth";
import Nationality from "./space/Nationality";
import Religion from "./space/Religion";
import Gender from "./space/Gender";
import ValidUntil from "./space/ValidUntil";
import RtRw from "./space/RtRw";




var options =  {
    apikey: 'c651c379bd88957',
    scale: true,
    detectOrientation: true,
    language: 'eng', // PortuguÃªs
    // imageFormat: 'image/png', // Image Type (Only png ou gif is acceptable at the moment i wrote this)
    isOverlayRequired: true,
    isTable : false
};

export default class {

    // private worker = new Space();
    private error : any;
    private $text : string = '';
    private $executed : boolean = false;

    constructor(
        private tempPath : string,
        private file : any,
        executed : (index : Space) => any
    ) {

        console.log('temp file : ' + this.path());

        file.mv(this.path(), (err : any) => {

            if(err) {

                this.error = err;

            } else {

                Space.parseImageFromLocalFile(this.path(), options)
                    .then((parsedResult : any) => {

                        let text = parsedResult.parsedText;

                        // remove non ascii char
                        text = text.replace(/[^\x00-\x7F]/g, "");

                        this.setText(text);


                        let parsers = [
                            new Nik(),
                            new RtRw(),
                            new HeaderProvince(),
                            new HeaderCity(),
                            new PlaceAndDateBirth(),
                            new Nationality(),
                            new Religion(),
                            new Gender(),
                            new ValidUntil(),
                        ];

                        let object : {getText : () => string} = this;

                        for(let parser of parsers) {

                            parser.setText(object.getText());
                            object = parser;
                        }

                        this.$executed = true;

                        executed(this);

                    }).catch(function (err : any) {
                    console.log('ERROR:', err);
                });

            }
        });
    }

    getText() : string{

        return this.$text;
    }

    setText(text : string) {

        this.$text = text;
    }

    get executed() : boolean {

        return this.$executed;
    }

    protected setResult(data : any) {

        for(let raw of data.lines) {
            console.log(raw.text);

        }
        console.log(data.lines);
    }

    path () : string {

        return this.tempPath + '/' + this.file.name;
    }
}